strict digraph  {
nodesep=3;
1 [selector=None, type=source];
4 [selector=while, type=None];
6 [selector=None, type=None];
8 [selector=None, type=None];
10 [selector=None, type=None];
13 [selector=while, type=None];
16 [selector=if, type=None];
18 [selector=else, type=None];
20 [selector=None, type=None];
22 [selector=None, type=None];
23 [selector=None, type=sink];
1 -> 4  [action="(< i 10)", label="(< i 10)"];
1 -> 8  [action="(! (< i 10))", label="(! (< i 10))"];
4 -> 6  [action="(call read (([] A i)))", label="(call read (([] A i)))"];
6 -> 1  [action="(:= i (+ i 1))", label="(:= i (+ i 1))"];
8 -> 10  [action="(:= i 0)", label="(:= i 0)"];
10 -> 13  [action="(< i 10)", label="(< i 10)"];
10 -> 22  [action="(! (< i 10))", label="(! (< i 10))"];
13 -> 16  [action="(>= ([] A i) 0)", label="(>= ([] A i) 0)"];
13 -> 18  [action="(! (>= ([] A i) 0))", label="(! (>= ([] A i) 0))"];
16 -> 20  [action="(:= (. R fst) (+ (. R fst) ([] A i)))", label="(:= (. R fst) (+ (. R fst) ([] A i)))"];
18 -> 20  [action="(:= i (+ i 1))", label="(:= i (+ i 1))"];
20 -> 10  [action="(:= (. R snd) (+ (. R snd) 1))", label="(:= (. R snd) (+ (. R snd) 1))"];
22 -> 23  [action="(call write ((/ (. R fst) (. R snd))))", label="(call write ((/ (. R fst) (. R snd))))"];
}
