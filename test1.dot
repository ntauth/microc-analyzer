strict digraph  {
nodesep=3;
0 [selector=None, type=source];
1 [selector=while, type=None];
4 [selector=None, type=None];
3 [selector=None, type=None];
2 [selector=None, type=None];
10 [selector=None, type=sink];
9 [selector=None, type=None];
8 [selector=None, type=None];
7 [selector=else, type=None];
6 [selector=if, type=None];
5 [selector=while, type=None];
0 -> 1  [action="(< i 10)", label="(< i 10)"];
0 -> 3  [action="(! (< i 10))", label="(! (< i 10))"];
1 -> 2  [action="(call read (([] A i)))", label="(call read (([] A i)))"];
4 -> 9  [action="(! (< i 10))", label="(! (< i 10))"];
4 -> 5  [action="(< i 10)", label="(< i 10)"];
3 -> 4  [action="(:= i 0)", label="(:= i 0)"];
2 -> 0  [action="(:= i (+ i 1))", label="(:= i (+ i 1))"];
9 -> 10  [action="(call write ((/ (. R fst) (. R snd))))", label="(call write ((/ (. R fst) (. R snd))))"];
8 -> 4  [action="(:= (. R snd) (+ (. R snd) 1))", label="(:= (. R snd) (+ (. R snd) 1))"];
7 -> 8  [action="(:= i (+ i 1))", label="(:= i (+ i 1))"];
6 -> 8  [action="(:= (. R fst) (+ (. R fst) ([] A i)))", label="(:= (. R fst) (+ (. R fst) ([] A i)))"];
5 -> 7  [action="(! (>= ([] A i) 0))", label="(! (>= ([] A i) 0))"];
5 -> 6  [action="(>= ([] A i) 0)", label="(>= ([] A i) 0)"];
}
